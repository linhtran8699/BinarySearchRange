import java.io.*;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;


public class BinarySearchRange {
    public static void main(String[] args) throws IOException {

// I created an ArrayList and name it data. "data" will read and use the information provided by args[0]
        ArrayList<Integer> data = new ArrayList<Integer>();
	data=readData(args[0]);

// x, y will read and use the data from args[1], args[2], respectively. 
// I also make sure that the data in x, y will be converted to integers.
        int x = Integer.parseInt(args[1]);
        int y = Integer.parseInt(args[2]);
        
        BinarySearchRange obj = new BinarySearchRange();

// Condition 1: there is no elements in args[0], and x > y => the result is null
        if (data == null || x > y) {
            System.out.println("null");

// Condition 2: y is less than the smallest (first) element in data => the result is null
        } else if (y < data.get(0)) {
            System.out.println("null");

// Condition 3: x is great than the largest (last) elements of data => the result is null
        } else if (x > data.get(data.size()-1)) {
            System.out.println("null");

// Condition 4: x is less than the smallest (first) element in data and y is greater than the largest (last) in data
// => The result: print all elements in data
        } else if (x < data.get(0) && y > data.get(data.size()-1)) {
            System.out.printf("\nA[0..%d]\n", data.size() - 1);
            printArray(data, 0, data.size() - 1);

// Condition 5: x is less than or equal to the smallest (first) element and y is less than the second element
// => The result: print just the first element of data 
        } else if (x <= data.get(0) && y < data.get(1) ) {
            System.out.printf("A[0] \n");
            printArray(data, 0, 0);

// If none of conditions above are satisfied, we move on to the search for 
// the leftmost array element that is greater or equal to x and-
// the rightmost array element that is less than or equal to y
// and the index of x must be less than or equal to that of y

// The main idea is that we section the array into half, we first compare x, y to the number number of the array, 
// then we compare x, y to the number right in front of the middle number or right behind the middle number, 
// depending on the cases, we will choose to shift the boundaries up and down and 
// continue to compare x, y to the middle number of the first half of the array or the second half of the array
// we will keep sectioning the new array untill we find the right element in the array. 
// By doing this, we will be able to achive the time cost which is O(log n)
// we are not searchihng element linearly 

        }
        else {
            int ix, iy;
            ix = obj.searchForX(data, x);
            iy = obj.searchForY(data, y);
            if (ix > iy) { //fix
                System.out.println("null");
            } else {
                System.out.printf("\nA[%d..%d]\n", ix, iy);
                printArray(data, ix, iy);
            }
        }
    }

// when searching for suitable element in the array 
// I used integers called low, high, mid as boundaries of the searching area (these are indexes of the element in the array)
// low is initially set to 0
// high is initially set to be equal to the number of elements in the array
// mid is the median number between low and high, mid will be round down

// Firstly, search for the index of the leftmost array element that is greater or equal to x
// The idea is that x will be compared to the middle number of the array (index mid) 
// and then compared to the number right in front of the middle number (index mid-1), 
// depending on which case this fall into, the index of these numbers (high, low, mid) will be changed or returned

// Case 1: if x is equal to the middle number, then x will be compare to the number right in front of the middle number (index mid-1)
// if x is equal to that, the last element in the array is now that number (index mid-1)
// if x is greater or less than the number right in front of the middle number (index mid-1), the index of the middle number will be returned

// Case 2:if x is less than the middle number, then the middle number will be the last element in the array
// if x is greater than the number (mid - 1), the index of the middle number will be returned
// in other cases, the last element of the array will be change to the middle number => the middle number is now the last element of the array

// Case 3: if x is greater than the middle number, then the middle number will be the first element of the array 


    public int searchForX(ArrayList<Integer> data, int x) {
        int low = 0;
        int high = data.size();
        int mid = 0;
        while (high >= low) {
            mid = (int) Math.floor((high + low) / 2);
            if (x <= data.get(0)) {
                return 0;
            } else if (high - low ==1) {
                return high;
            } else if (x == data.get(mid)) {
                if (x == data.get(mid - 1)) {
                    high = mid - 1;
                } else {
                    return mid;
                }
            } else if (x > data.get(mid)) {
                low = mid;
            } else if (x < data.get(mid)) {
                if (data.get(mid - 1) < x) {
                    return mid;
                } else {
                    high = mid;
                }
            }
        }
        return mid;
    }

// Secondly, search for the index of the rightmost array element that is less than or equal to x
// The idea is that y will be compared to the middle number of the array (index mid) 
// and then compared to the number right in front of the middle number (index mid-1), or 
// compared to the number right behind the middle number (index mid+1), 
// depending on which case this fall into, the index of these numbers (high, low, mid) will be changed or returned

// Case 1: if y is equal to the middle number, then y will be compare to the number right behind the middle number (index mid+1)
// if y is equal to that, the first element in the array will now be the middle number 
// if y is greater than that, the fist element is now the number right behind the middle number
// in other cases, the index of the middle number will be returned

// Case 2:if y is less than the middle number, it will be compared to the number right infront of the middle number
// if y is equal to that, the index of the number right in front of the middle number will be returned
// if y is less than that, the last element will now be that number (mid -1)
// in other cases, the index of the number right in front of the middle number will be returned

// Case 3: if y is greater than the middle number, then y will be compare to the number right behind the middle number (index mid+1)
// if y is less than or equal to the (mid +1) number, the first element will be changed to the middle number
// in other case, the index of the middle number will be returned

    public int searchForY(ArrayList<Integer> data, int y) {
        int low = 0;
        int high = data.size() ;
        int mid = 0;
        while (high >= low) {
            if (high - low ==1) {
                return low;
            }
            mid = (int) Math.floor((high + low) / 2);
            if (y >= data.get(data.size() -1 )){
                return data.size()-1;
            } else if (y == data.get(mid)) {
                if (y == data.get(mid+1)) {
                    low = mid;
                } else if (data.get(mid +1) < y) {
                    low = mid+1;
                } else {
                    return mid;
                }
            } else if (y > data.get(mid)) {
                if ( data.get(mid+1) <= y ) {
                    low = mid;
                } else {
                    return mid;
                }
            } else if (y < data.get(mid)) {
                if (data.get(mid - 1) == y) {
                    return mid - 1;
                } else if (data.get(mid - 1) > y) {
                    high = mid - 1;
                } else {
                    return mid - 1;
                }
            }
        }
        return mid;
    }


    static ArrayList<Integer> readData(String dataFile)
            throws FileNotFoundException, IOException{
        ArrayList<Integer> data = new ArrayList<>();
        File file = new File(dataFile);

        BufferedReader br = new BufferedReader(new FileReader(file));
        String st;

        while ((st=br.readLine()) != null) {
            data.add(Integer.parseInt(st));
        }
        return data;
    }

    static void printArray(ArrayList<Integer> A, int x, int y) {
        for (int i = x; i <= y; i++) {
            System.out.printf("%4d", A.get(i));
        }
        System.out.println("");
    }
}